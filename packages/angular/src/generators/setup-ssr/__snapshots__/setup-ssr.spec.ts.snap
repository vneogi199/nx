// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`setupSSR should create the files correctly for ssr 1`] = `
{
  "configurations": {
    "development": {
      "buildOptimizer": false,
      "extractLicenses": false,
      "optimization": false,
      "sourceMap": true,
      "vendorChunk": true,
    },
    "production": {
      "outputHashing": "media",
    },
  },
  "defaultConfiguration": "production",
  "dependsOn": [
    "build",
  ],
  "executor": "@angular-devkit/build-angular:server",
  "options": {
    "main": "app1/server.ts",
    "outputPath": "dist/app1/server",
    "tsConfig": "app1/tsconfig.server.json",
  },
}
`;

exports[`setupSSR should create the files correctly for ssr 2`] = `
"import 'zone.js/dist/zone-node';

import { APP_BASE_HREF } from '@angular/common';
import { ngExpressEngine } from '@nguniversal/express-engine';
import * as express from 'express';
import { existsSync } from 'fs';
import { join } from 'path';

import { AppServerModule } from './src/main.server';

// The Express app is exported so that it can be used by serverless Functions.
export function app(): express.Express {
  const server = express();
  const distFolder = join(process.cwd(), 'dist/app1/browser');
  const indexHtml = existsSync(join(distFolder, 'index.original.html'))
    ? 'index.original.html'
    : 'index';

  // Our Universal express-engine (found @ https://github.com/angular/universal/tree/main/modules/express-engine)
  server.engine(
    'html',
    ngExpressEngine({
      bootstrap: AppServerModule,
    })
  );

  server.set('view engine', 'html');
  server.set('views', distFolder);

  // Example Express Rest API endpoints
  // server.get('/api/**', (req, res) => { });
  // Serve static files from /browser
  server.get(
    '*.*',
    express.static(distFolder, {
      maxAge: '1y',
    })
  );

  // All regular routes use the Universal engine
  server.get('*', (req, res) => {
    res.render(indexHtml, {
      req,
      providers: [{ provide: APP_BASE_HREF, useValue: req.baseUrl }],
    });
  });

  return server;
}

function run(): void {
  const port = process.env['PORT'] || 4000;

  // Start up the Node server
  const server = app();
  server.listen(port, () => {
    console.log(\`Node Express server listening on http://localhost:\${port}\`);
  });
}

// Webpack will replace 'require' with '__webpack_require__'
// '__non_webpack_require__' is a proxy to Node 'require'
// The below code is to ensure that the server is run only when not requiring the bundle.
declare const __non_webpack_require__: NodeRequire;
const mainModule = __non_webpack_require__.main;
const moduleFilename = (mainModule && mainModule.filename) || '';
if (moduleFilename === __filename || moduleFilename.includes('iisnode')) {
  run();
}

export * from './src/main.server';
"
`;

exports[`setupSSR should create the files correctly for ssr when app is standalone 1`] = `
{
  "configurations": {
    "development": {
      "buildOptimizer": false,
      "extractLicenses": false,
      "optimization": false,
      "sourceMap": true,
      "vendorChunk": true,
    },
    "production": {
      "outputHashing": "media",
    },
  },
  "defaultConfiguration": "production",
  "dependsOn": [
    "build",
  ],
  "executor": "@angular-devkit/build-angular:server",
  "options": {
    "main": "app1/server.ts",
    "outputPath": "dist/app1/server",
    "tsConfig": "app1/tsconfig.server.json",
  },
}
`;

exports[`setupSSR should create the files correctly for ssr when app is standalone 2`] = `
"import 'zone.js/dist/zone-node';

import { APP_BASE_HREF } from '@angular/common';
import { ngExpressEngine } from '@nguniversal/express-engine';
import * as express from 'express';
import { existsSync } from 'fs';
import { join } from 'path';

import bootstrap from './src/main.server';

// The Express app is exported so that it can be used by serverless Functions.
export function app(): express.Express {
  const server = express();
  const distFolder = join(process.cwd(), 'dist/app1/browser');
  const indexHtml = existsSync(join(distFolder, 'index.original.html'))
    ? 'index.original.html'
    : 'index';

  // Our Universal express-engine (found @ https://github.com/angular/universal/tree/main/modules/express-engine)
  server.engine(
    'html',
    ngExpressEngine({
      bootstrap,
    })
  );

  server.set('view engine', 'html');
  server.set('views', distFolder);

  // Example Express Rest API endpoints
  // server.get('/api/**', (req, res) => { });
  // Serve static files from /browser
  server.get(
    '*.*',
    express.static(distFolder, {
      maxAge: '1y',
    })
  );

  // All regular routes use the Universal engine
  server.get('*', (req, res) => {
    res.render(indexHtml, {
      req,
      providers: [{ provide: APP_BASE_HREF, useValue: req.baseUrl }],
    });
  });

  return server;
}

function run(): void {
  const port = process.env['PORT'] || 4000;

  // Start up the Node server
  const server = app();
  server.listen(port, () => {
    console.log(\`Node Express server listening on http://localhost:\${port}\`);
  });
}

// Webpack will replace 'require' with '__webpack_require__'
// '__non_webpack_require__' is a proxy to Node 'require'
// The below code is to ensure that the server is run only when not requiring the bundle.
declare const __non_webpack_require__: NodeRequire;
const mainModule = __non_webpack_require__.main;
const moduleFilename = (mainModule && mainModule.filename) || '';
if (moduleFilename === __filename || moduleFilename.includes('iisnode')) {
  run();
}

export default bootstrap;
"
`;

exports[`setupSSR should use fileReplacements if they already exist 1`] = `
{
  "configurations": {
    "development": {
      "buildOptimizer": false,
      "extractLicenses": false,
      "optimization": false,
      "sourceMap": true,
      "vendorChunk": true,
    },
    "production": {
      "fileReplacements": [
        {
          "replace": "app1/src/environments/environment.ts",
          "with": "app1/src/environments/environment.prod.ts",
        },
      ],
      "outputHashing": "media",
    },
  },
  "defaultConfiguration": "production",
  "dependsOn": [
    "build",
  ],
  "executor": "@angular-devkit/build-angular:server",
  "options": {
    "main": "app1/server.ts",
    "outputPath": "dist/app1/server",
    "tsConfig": "app1/tsconfig.server.json",
  },
}
`;
